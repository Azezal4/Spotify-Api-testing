{
	"info": {
		"_postman_id": "49661573-96669f67-9015-4370-bcda-8dd4636dd05a",
		"name": "Spotify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "browse_categories",
			"item": [
				{
					"name": "several_browse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67f05094-d780-4622-98cb-5c898e8b0e3f",
								"exec": [
									"// Validating response status",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49661573-ce1a0864-1733-4742-b543-848ef99b7383",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_1hr}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1POdFZRZbvb...qqillRxMr2z"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							]
						},
						"description": "Generated from cURL: curl --request GET \\\n  --url https://api.spotify.com/v1/browse/categories \\\n  --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'"
					},
					"response": []
				},
				{
					"name": "singlebrowse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89b546c6-c92a-4a38-867b-770b3d8f4852",
								"exec": [
									"// Since we are using the Authorization header, we need to check if it is set correctly. The token is already in use in the first collection so the end goal is to check if the token is valid and if the user is registered. If the user is not registered, the response will be 403 Forbidden. If the token is valid, the response will be.",
									"",
									"    pm.test(\"Authorization header is set\", function () {",
									"    pm.response.to.have.status(200);",
									"    })"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "49661573-5d39f35c-19a3-4a9a-a87c-9b24d0e69203",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_1hr}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1POdFZRZbvb...qqillRxMr2z"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/dinner",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								"dinner"
							]
						}
					},
					"response": []
				}
			],
			"id": "49661573-16f7c035-7938-4fdd-8ac2-f02ac69cb99b",
			"description": "These api testing is cerated in order to test the categories section of the spotify."
		},
		{
			"name": "Albums",
			"item": [
				{
					"name": "verify fetched data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63bbb658-3768-47eb-815d-d9f8394d7ca4",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Fetched data is of type albun\", () => {",
									"    var resposedata = pm.response.json();",
									"    pm.expect(resposedata.type).to.equal(\"album\");",
									"})"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49661573-08a4075a-a9bc-4ddb-b31e-a6fc59a7a558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:auth_for_1hr}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1POdFZRZbvb...qqillRxMr2z"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"4aawyAB9vmqN3uQ7FjRGTy"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify the date of latest albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec2c56d1-6cc9-4770-8843-fced5206099d",
								"exec": [
									"    // Validating whether the data provided by the spotify is actually latest or not",
									"    const responseDateString = pm.response.json()",
									"    var latest_artists = responseDateString.albums.items;",
									"    var  artistReleaseDate = []",
									"    for (i=0; i<latest_artists.length; i++){",
									"        var artist_name = latest_artists[i].name;",
									"        var release_date = latest_artists[i].release_date;",
									"        artistReleaseDate.push({artist_name, release_date});",
									"    }",
									"",
									"        // Since we have parsed the data, we can now compare the date and validate.",
									"        for (let i = 0; i < artistReleaseDate.length -1; i++) {",
									"    const current_date = new Date(artistReleaseDate[i].release_date);",
									"    const next_date = new Date(artistReleaseDate[i+1].release_date);",
									"    console.log(next_date)",
									"",
									"    pm.test(`Release date of \"${artistReleaseDate[i].artist_name}\" is not older than next album`, function () {",
									"        pm.expect(current_date.getTime()).to.be.at.least(next_date.getTime());",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "49661573-6a5532b5-6e14-4353-84c8-0fb9069b8657",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:auth_for_1hr}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 1POdFZRZbvb...qqillRxMr2z"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/new-releases",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							]
						}
					},
					"response": []
				}
			],
			"id": "49661573-7302f4e8-056f-4d00-9c39-6549a0c59e86",
			"description": "Check for all the albums that are arranged in the spotify"
		},
		{
			"name": "https://accounts.spotify.com/api/token",
			"id": "49661573-8d6f9a55-9681-4429-90dc-a1706eeafd26",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{basic_auth_spotify_token_1hr}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "grant_type",
						"value": "client_credentials",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"type": "text",
							"key": "grant_type",
							"value": "client_credentials"
						},
						{
							"type": "text",
							"key": "client_id",
							"value": "001becb8af6745dda1abab38c86e493d"
						},
						{
							"type": "text",
							"key": "client_secret",
							"value": "6651005d751749b5ac230390e7f7c7eb"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9afc61c9-8998-491c-ad23-bf10c55e1040",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "98f16d15-9ea7-4766-b69b-36d6fc81f5f7",
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "basic_auth_spotify_token_1hr",
			"value": ""
		},
		{
			"key": "auth_for_1hr",
			"value": ""
		}
	]
}